I. Uruchomienie projektu
========================

0. Terminologia:


Employee - Pracownik
Institute - Instytut


1. Symfony 2 SE

2. Dodatkowe punkty/Modyfikacje

    a. Usuwamy ACME
    b. Gitignore
    c. Dodamy Bazę danych
    d. Dodamy migrację
    e. Podpowiedzi (checksheet)


Polecenia

1. git clone git@github.com:gajdaw/symfony-standard.git
2. git checkout –b dev v2.2.0
3. git merge origin/2.2-Acme
4. git merge origin/2.2-Gitignore
5. git merge origin/2.2-db
6. git merge origin/2.2-DoctrineMigrationBundle
7. git merge origin/2.2-Cheetsheet

Uaktualnienie zależności
    composer update doctrine/doctrine-migrations-bundle

Środowisko IDE
1. Uruchomienie i konfiguracja PHPStorm

Instalacja zależności
1. composer self-update
2. composer install

Tworzymy bazę danych
1. create-empty-database.sql
2. Inicjalizacja migracji (tylko leader)
3. Migrujemy bazę danych:
    php app/console doctrine:migrations:migrate

Tworzymy Bundla
    php app/console generate:bundle --namespace=Gajdaw/AngazeBundle --dir=src --no-interaction

II. Każdy uczestnik projektu tworzy fragment modelu
===================================================

Model: http://symfony.gajdaw.pl/rysunki-html/23-01.html

1. Pracujemy w głaęziach (np. dev)

   git checkout -b dev

2. Tworzymy model
   php app/console doctrine:generate:entity

   GajdawAngazeBundle:Position
   GajdawAngazeBundle:Faculty
   GajdawAngazeBundle:Study
   GajdawAngazeBundle:Subjejct

   Jedna kolumna   name (string: 255)

3. Tworzymy migracje

   php app/console doctrine:migrations:diff

4. Migrujemy bazę

   php app/console doctrine:migrations:migrate

5. Generujemy panel CRUD

   php app/console doctrine:generate:crud

   Podajemy utworzone Entity, np.:

   GajdawAngazeBundle:Position
   GajdawAngazeBundle:Faculty
   GajdawAngazeBundle:Study
   GajdawAngazeBundle:Subjejct

6. Sprawdzamy panel CRUD

    http://localhost/angaze/web/app_dev.php/faculty




III. Dołączanie do projektu
===========================

  1. Klon repozytorium
     git clone git@github.com:tdd-php/angaze.git .

  2. Aktualizacja zależności
      composer self-update
      composer install

  3. Fork repozytorium
      git@github.com:tdd-php/angaze.git

  4. Konfiguracja własnego forka w lokalnym repo na dysku C

      git remote add upstream git@github.com:JANEK/angaze.git
      (użyj adresu własnego forka)

  5. Uruchamiamy IDE

  6. Tworzymy bazę danych
      php app/console doctrine:migrations:migrate



IV. Aktualizacja projektu
=========================

  1. git checkout master
  2. git pull origin master
  3. php app/console doctrine:migrations:migrate


VI. Rozszerzamy projekt o nowe bundle (tylko leader)
=====================================

1. Adres repozytorium symfony standard:

git remote add symfony-standard git@github.com:gajdaw/symfony-standard.git

2. Pracujemy w głęzi tmp:
git checkout master
git checkout -b tmp

3. Pobieramy gałąź 2.2-DoctrineFixturesBundle

git pull symfony-standard 2.2-DoctrineFixturesBundle

4. Dołączanie gałęzi:

 git checkout master
 git merge tmp

5. Aktualizacja zależności:


VII. Uaktualnienie zależności
=============================

git pull origin master
composer install


VIII. Fixtury
=============================

php app/console doctrine:fixtures:load


IX. Layout + menu
=================

1. Modyfikacje w pliku layout.html.twig (dodajemy pozycję menu dla własnego modelu)
2. Modyfikujemy własne widoki


X. Dodajemy kolumnę tmp w modelu
================================

1. Zmiana modelu: dodajemy kolumnę tmp (identyczną jak name)
2. php app/console doctrine:migrations:diff
3. php app/console doctrine:migrations:migrate
4. Usuwamy fomularz: Form/EmployeeType.php
5. php app/console doctrine:generate:form GajdawAngazeBundle:Employee
6. Dostosowujemy widoki: index.html.twig, show.html.twig


XI. Usuwamy kolumnę w modelu
============================

1. Zmiana modelu: usuwamy kolumnę tmp
2. php app/console doctrine:migrations:diff
3. php app/console doctrine:migrations:migrate
4. Dostosowujemy widoki i formularz


XII. Kolumna slug


XII. Kolumna slug

XIII. Relacje

    a) Wzór
    1:n    Kontynent -> Panstwo


    b)
    1:n Wydział -> Katedra
    1:n Faculty -> Department

    c)
    1:n Katedra -> Pracownik
    1:n Department -> Employee

    d)
    1:n Wydział -> Kierunek studiów
    1:n Faculty -> Course

    e)
    1:n Rodzaj studiów -> Kierunek studiów
    1:n CourseType -> Course

    f)
    1:n Rodzaj studiów -> Kierunek studiów
    1:n CourseType -> Course

    g)
    1:n Kierunek studiów -> Przedmiot
    1:n Course -> Subject

    h)
    1:n Type przedmiotu -> Przedmiot
    1:n SubjectType -> Subject

    i)
    1:n Stanowisko -> Pracownik
    1:n Position -> Employee

    i)
    1:n Pokój -> Pracownik
    1:n Room -> Employee

    j)
    1:n Typ studiów -> Kierunek studiów
    1:n CourseType -> Course

    j)
    1:1
    1:1 Oranizacja <-> Pracownik
    1:1 Organization <-> Employee

    k)
    1:n *2
    EmployeeSubject
    1:n Employee -> EmployeeSubject
    1:n Subject -> EmployeeSubject



XIV. Procedura definiowania relacji

1. Dodajemy właściwości: np.
   W Kontynent.php: panstwa
   W Panstwo.php: kontynent

2. php app/console doctrine:generate:entities GajdawAngazeBundle:Employee
   Wynik: wygenerowane metody dla relacji

3. Migracja:

    php app/console doctrine:migrations:diff
    php app/console doctrine:migrations:migrate

4. Ponowne wygenerowanie
   formularza lub całego CRUD
   (lub ręczna aktualizacja)

5. Definiowanie metody __toString() w klasie modelu





